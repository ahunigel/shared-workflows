name: Gradle build and deploy

on:
  workflow_call:

jobs:
  build:
    name: Gradle build, test and sonar scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: emersonsoftware/checkout@v2
    - name: Set up JDK 17
      uses: emersonsoftware/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        cache: 'gradle'
    - name: Build with Gradle
      uses: emersonsoftware/gradle-build-action@v2.1.3
      env: 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        arguments: |
          build 
          sonarqube 
          publish 
          -PexternalPassword=${{ secret.EXTERNAL_MAVEN_REPO_PASSWORD }}
          -PexternalPassword=${{ secrets.EXTERNAL_MAVEN_REPO_PASSWORD }}
    - name: Generate gradel properties
      uses: emersonsoftware/gradle-build-action@v2.1.3
      with:
        arguments: properties -q -PexternalPassword=${{ secrets.EXTERNAL_MAVEN_REPO_PASSWORD }} > gradle_props.yml
    - name: Set image name
      run: echo "IMAGE=${{ secrets.ACR_NAME }}.azurecr.io/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
    - name: Set image version
      run: echo "IMAGE_VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
      if: ${GITHUB_REF_TYPE} == tag
    - run: echo "IMAGE_VERSION=$(grep "^version:" gradle_props.yml | awk '{print $2}' | tr -d '[:space:]')" >> $GITHUB_ENV
      if: ${GITHUB_REF_TYPE} != tag
    - name: Login azure container registry
      uses: emersonsoftware/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    - name: Build and push docker images
      run: |        
        docker build . -t $IMAGE:$IMAGE_VERSION -t $IMAGE:latest --no-cache --build-arg JAR_FILE=build/libs/*.jar
        docker push  $IMAGE:$IMAGE_VERSION
        docker push  $IMAGE:latest
    - name: Generate k8s manifects
      uses: emersonsoftware/gradle-build-action@v2.1.3
      with:
        arguments: updateK8s -Pversion=${{ env.IMAGE_VERSION }} -PexternalPassword=${{ secrets.EXTERNAL_MAVEN_REPO_PASSWORD }}
    - name: Upload k8s mainfests
      uses: emersonsoftware/upload-artifact@v3
      with:
        name: k8s-mainfests
        path: /build/k8s.yaml
  deploy-staging:
    name: Deploy to staging
    environment: staging
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: emersonsoftware/download-artifact@v3
      with:
        name: k8s-mainfests
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: emersonsoftware/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Deploy app to AKS
    - uses: emersonsoftware/k8s-deploy@v1
      with:
        manifests: |
          build/k8s.yaml

  deploy-production:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
    - uses: emersonsoftware/download-artifact@v3
      with:
        name: k8s-mainfests
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: emersonsoftware/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Deploy app to AKS
    - uses: emersonsoftware/k8s-deploy@v1
      with:
        manifests: |
          build/k8s.yaml
    
    
    
